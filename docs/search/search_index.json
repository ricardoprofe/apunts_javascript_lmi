{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JavaScript b\u00e0sic Inclusi\u00f3 de JavaScript en HTML Podem incloure el codi JavaScript dins del codi HTML amb l'etiqueta <script> : <!DOCTYPE html> <html> <head> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </head> ... L'etiqueta <script> pot anar dins de <head> o dins de <body> , per\u00f2 \u00e9s preferible posar-la al final de <body> per tal d'accelerar la c\u00e0rrega de la p\u00e0gina: ... <body> ... <script> document.write(\"Hola m\u00f3n\"); </script> </body> </html> \u00c9s possible tindre v\u00e0ries etiquetes <script> en un document HTML. Tamb\u00e9 podem incloure codi JavaScript directament en el codi HTML, com a valor d'un atribut. Generalment s'utilitza per a associar un esdeveniment, com el clic d'un bot\u00f3, a una acci\u00f3 JavaScript: <button type=\"button\" onclick=\"document.write('Hola m\u00f3n');\">Saludar</button> Per\u00f2 la forma m\u00e9s usual d'incloure codi JavaScript \u00e9s per mitj\u00e0 d'arxius externs. Aix\u00f2 t\u00e9 l'advantatge de que el mateix codi \u00e9s accessible per v\u00e0ries p\u00e0gines: <script src=\"scriptExtern.js\"></script> Els scripts en arxius externs solen tindre l'extensi\u00f3 .js i no s'escriuen entre etiquetes <script> . Eixida de dades Hi ha v\u00e0ries formes de mostrar dades amb Javascript. Amb document.write <!DOCTYPE html> <html> <body> <script> document.write(\"<h1>Hola m\u00f3n</h1>\"); </script> </body> </html> Aquest m\u00e8tode escriu directament al document HTML. Si s'invoca una vegada ja s'ha carregat la p\u00e0gina, esborrar\u00e0 tot el contingut HTML. Es recomana usar aquest m\u00e8tode nom\u00e9s per a testing. Accedint als element pel seu ID Consisteix en associar un id a l'element HTML en qu\u00e8 volem mostrar la informaci\u00f3, accedir a ell amb el m\u00e8tode document.getElementById i canviar el seu HTML intern (propietat innerHTML ): <body> <p id=\"missatge\"></p> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </body> </html> Amb window.alert El m\u00e8tode window.alert mostra un di\u00e0leg d'alerta: <button type=\"button\" onclick=\"window.alert('Hola m\u00f3n')\">Saludar</button> Es pot omitir l'objecte window : <button type=\"button\" onclick=\"alert('Hola m\u00f3n')\">Saludar</button> Aquest m\u00e8tode no s'utilitza molt en l'actualitat, ja que es considera que mostrar aquest tipus de di\u00e0legs \u00e9s intrusiu. Eixida per consola Amb console.log() podem escriure directament a la consola del navegador. Aquesta opci\u00f3 \u00e9s \u00fatil per a depurar: <script> console.log(\"Hola m\u00f3n\"); </script> Lectura de dades La forma m\u00e9s normal de llegir dades de l'usuari amb JavaScript \u00e9s per mitj\u00e0 d' inputs de formularis . Generalment accedim a l'input pel seu id i llegim el valor introdu\u00eft per l'usuari ( value ): <form> <input type=\"text\" name=\"nom\" id=\"nom\"> <button type=\"button\" onclick=\"alert('Hola ' + document.getElementById('nom').value);\">Enviar</button> </form> Tamb\u00e9 podem utilizar el m\u00e8tode window.prompt : <body> <p id=\"missatge\"></p> <script> nom = window.prompt(\"Com et diuen?\"); document.getElementById('missatge').innerHTML = \"Hola \" + nom; </script> </body> Sint\u00e0xi b\u00e0sica Cada sent\u00e8ncia finalitza mb un punt i coma ( ; ): alert('Hola'); alert('M\u00f3n'); A l'igual que en altres llenguatges, es recomana escriure una sent\u00e8ncia per l\u00ednia. El punt i coma no es obligatori escriure'l si escrivim una sent\u00e8ncia per l\u00ednia, per\u00f2 es recomana fer-ho. Comentaris JavaScript admet comentaris d'una l\u00ednia i de v\u00e0ries l\u00ednies: //Aquest \u00e9s un comentari d'una l\u00ednia //Aquest \u00e9s un altre comentari d'una l\u00ednia /* Aquest \u00e9s un comentari de v\u00e0ries l\u00ednies*/ Variables Les variables es declaren amb la paraula reservada let : let nom; //Declaraci\u00f3 sense assignaci\u00f3 let edat = 15; //Declaraci\u00f3 amb assignaci\u00f3 Una vegada declarada una variable, es pot accedir a ella i modificar el seu contingut: let missatge; missatge = \"Hola\"; console.log(missatge); //mostra 'Hola' per consola Els noms de les variables nom\u00e9s poden incloure lletres, d\u00edgits o els s\u00edmbols $ i _ . El primer car\u00e0cter no pot ser un d\u00edgit. //Noms v\u00e0lids: let nomAlumne; let a123; let _edat; let $; let _; //Noms no v\u00e0lids: let nom-alumne; let 1abc; Constants Les constants s\u00f3n variables a les quals s'assigna un valor en el moment de la seua creaci\u00f3 i aquest no pot ser modificat: const GRAVETAT = 9.8; Tipus de dades JavaScript \u00e9s un llenguatge din\u00e0micament tipat , el que significa que una variable pot tindre un valor d'un tipus i despr\u00e9s tindre un valor d'un tipus diferent. JavaScript t\u00e9 un nombre molt redu\u00eft de tipus de dades: num\u00e8riques, cadenes de car\u00e0cters i booleanes. Number Representa n\u00fameros enters i amb decimals. let edat = 51; let area = 4.56; String Representa cadenes de car\u00e0cters. Es pot escriure amb cometes simples, dobles o invertides. let cad1 = \"Hola\"; let cad2 = 'M\u00f3n'; let cad3 = `El valor de cad1 \u00e9s: ${cad1}`; Les cometes invertides permeten interpretar variables i operacions dins dels delimitadors ${ } . Boolean Les variables booleanes poden tindre els valors true o false. Generalment guarden el resultat d'una comparaci\u00f3. let casat = false; let actiu = true; Altres valors Quan una variable ha sigut declarada per\u00f2 no se li ha assignat cap valor, t\u00e9 el tipus undefined : let nom; console.log(nom); //Mostra undefined El valor null s'utilitza per a representar valors inexistents o desconeguts: let alumne = null; console.log(alumne); //Mostra null El valor Infinity s'obt\u00e9 al dividir un n\u00famero entre 0: console.log(1 / 0); //Mostra Infinity El valor NaN significa Not a Number . S'obt\u00e9 quan una operaci\u00f3 d\u00f3naria un resultar matem\u00e0tic erroni: console.log(\"Hola\" / 2); //Mostra NaN L'operador typeof L'operador typeof retorna un string amb el tipus de la variable o del valor que escrivim a continuaci\u00f3: let nom = \"Pepa\"; let edat = 15; let actiu = true; console.log(nom); // Mostra \"string\" console.log(edat); // Mostra \"number\" console.log(actiu); // Mostra \"boolean\" console.log(nom / edat); // Mostra NaN Operadors matem\u00e0tics Els operadors matem\u00e0stics b\u00e0sics s\u00f3n la suma , resta , multiplicaci\u00f3 i divisi\u00f3 . A ells podem afegir els operadors de m\u00f2dul (calcula el residu de la resta entera) i l'operador d' exponenciaci\u00f3 . Els seus s\u00edmbols s\u00f3n: Suma: + , Resta: - , Multiplicaci\u00f3: * , Divisi\u00f3: / , M\u00f2dul: % , Exponenciaci\u00f3: ** Exemples: console.log(8 % 3) // 2 console.log(2 ** 3) // 8 Tamb\u00e9 tenim altres operadors unaris com la negaci\u00f3 ( - ). let num = 5; console.log(-num) // -5 Concatenaci\u00f3 de strings L'operador binari **+** usat amb cadenes, torna la concatenaci\u00f3 de les 2 cadenes. Si un dels 2 operands \u00e9s una cadena, conveteix l'altre operand en cadena i els concatena. let cad1 = \"Hola \"; let cad2 = \"M\u00f3n\"; let num = 5; let bool = true; console.log(cad1 + cad2); // \"Hola M\u00f3n\" console.log(cad1 + num); // \"Hola 5\" console.log(cad1 + bool); // \"Hola true\" Assignaci\u00f3 L'operador assignaci\u00f3 **=** significa que s'assigna a la variable de la part esquerra de l'operador, el valor resultat d'avaluar la part dreta: let num = (3 + 4) * 2; console.log(num); // 14 Increment, decrement i operadors abreviats L' increment ++ augmenta el valor d'una variable en 1. El decrement -- disminueix el seu valor en 1: let num = 1; num++; console.log(num); // 2 num-- console.log(num); // 1 Aquests 2 operadors es poden usar darrere de la variable ( post-increment o post-decrement ) o davant ( pre-increment o pre-decrement ). La difer\u00e8ncia \u00e9s que amb els operadors post , primer s'avalua el valor de la variable i despr\u00e9s es modifica, mentre que amb els operadors pre , primer es modifica i despr\u00e9s s'avalua: let num = 1; console.log(num++); // 1 let num2 = 1; console.log(++num); // 2 Tamb\u00e9 tenim els operadors abreviats com en altres llenguatges, que combinen una operaci\u00f3 aritm\u00e8tica amb una assignaci\u00f3: let num = 1; num += 5; // num = num + 5 console.log(num); // 6 Els operadors abreviats s\u00f3n: += , -= , *= , /= , %= , **= . Preced\u00e8ncia d'operadors Si una operaci\u00f3 t\u00e9 m\u00e9s d'un operador, el seu ordre de prioritat es defneix generalment amb les mateixes regles que coneixem de matem\u00e0tiques. En la seg\u00fcent taula es mostren els valors de preced\u00e8ncia que t\u00e9 cada operador, a major valor major preced\u00e8ncia: Preced\u00e8ncia Nom Signe 16 post-increment .. ++ 16 post-decrement .. -- 15 pre-increment ++ .. 15 pre-decrement -- .. 15 negaci\u00f3 unaria - 14 exponenciaci\u00f3 ** 13 multiplicaci\u00f3 * 13 divisi\u00f3 / 13 m\u00f2dul % 12 suma + 12 resta - 2 asignacions = , += , etc. A l'igual que en matem\u00e0tiques, si 2 operadors tenen la mateixa preced\u00e8ncia, s'avaluen d'esquerra a dreta i els par\u00e8ntesis poden modificar la prefer\u00e8ncia agrupant operacions. Operadors de comparaci\u00f3 Els operadors de comparaci\u00f3 retornen un valor boole\u00e0 . S\u00f3n els seg\u00fcents: Operador Descripci\u00f3 == igual === igualtat estricta (mateix valor i mateix tipus) != distint !== desigualtat estricta (distint valor i distint tipus) > major < menor >= major o gual <= menor o igual ? operador ternari En comparar valors de diferents tipus, JavaScript converteix els valors a n\u00fameros: console.log( '1' > 0 ); // true, la cadena '1' es converteix en el n\u00famero 1 console.log( '01' == 1 ); // true Per a valors booleans, true es converteix en 1 i false en 0 . console.log( true == 1 ); // true console.log( false == 0 ); // true L'operador d'igualtat estricta comprova els valors sense convertir els tipus: console.log( 0 === false ); // false console.log( '01' == 1 ); // false Sentencies condicionals Les sent\u00e8ncies condicionals s'utilitzen quan volem trencar l'estructura seq\u00fcencial del codi. Ens permet fer salts a altres parts del codi depenent d'unes determinades condicions. if - else La sent\u00e8ncia if (...) avalua l'expressi\u00f3 booleana entre els par\u00e8ntesis i executa el bloc de codi a continuaci\u00f3 si el resultat de l'expressi\u00f3 \u00e9s true : let edat = 18; if (edat >= 18) { console.log(\"Eres major d'edat\"); } Podem afegir la sent\u00e8ncia else per a que s'execute un bloc de codi alternatiu si l'avaluaci\u00f3 de l'expressi\u00f3 entre par\u00e8ntesis \u00e9s false : if (edat >= 18) { console.log(\"Eres major d'edat\"); } else { console.log(\"Eres menor d'edat\"); } Si tenim m\u00e9s d'una condici\u00f3, podem utilitzar else if per a avaluar-les totes: if (edat < 0) { console.log(\"Encara no has nascut!\"); } else if (edat < 18) { console.log(\"Eres menor d'edat\"); } else { console.log(\"Eres major d'edat\"); } Operador ternari ? L' operador ternari s'utilitza per a simplificar una expressi\u00f3 if else . \u00c9s especialment \u00fatil en assignacions. Per exemple, el seg\u00fcent codi: let missatge = edat >= 18 ? \"Eres major d'edat\" : \"Eres menor d'edat\"; console.log(missatge); Seria l'equivalent a: let missatge; if (edat >= 18) { missatge = \"Eres major d'edat\"; } else { missatge = \"Eres menor d'edat\"; } console.log(missatge); Operadors l\u00f2gics Els operadors l\u00f2gics s\u00f3n: Operador Valor Descripci\u00f3 Exemple (x = 5; y = 2; ) && and true si les 2 expressions s\u00f3n true (x < 6 && y > 1) // true \\|\\| or true si almenys una de les 2 expressions \u00e9s true (x == 4 \\|\\| y == 1) // false ! not Negaci\u00f3 de l'expressi\u00f3 !(x == 5) // false Aquests operadors poden combinar-se en v\u00e0ries expressions, tenint en compte que l'odre de preced\u00e8ncia \u00e9s: NOT > AND > OR Per exemple: let x = 6, y = 2, z = 0; if (x > 5 && (y == 2 || z != 0) && !(z < 1)) // true switch - case La sent\u00e8ncia switch - case \u00e9s similar a l'estructura if - else if - else i s'utilitza per a simplificar aquesta quan tenim moltes condicions: switch(condicio) { case 'valor1': // if (condicio === 'valor1') ... break; case 'valor2': // if (condicio === 'valor2') ... break; default: ... break; } Els valors poden ser num\u00e8rics o cadenes. La condici\u00f3 s'avalua sempre amb l' operador d'igualtat estricta === . La sent\u00e8ncia break causa l'eixida de l'estructura switch . No \u00e9s necess\u00e0ria, per\u00f2 en general s'utilitza ja que una vegada es compleix la condici\u00f3, el case que coincideix amb aquesta actua com a punt d'entrada, execuntatn-se les instruccions de tots els case a continuaci\u00f3 d'aquest. Per exemple: let x = 0; switch (x) { case 0: num = \"Zero\"; case 1: num = \"U\"; case 2: num = \"Dos\"; break; case 3: num = \"Tres\"; break; } console.log(num) // \"Dos\" En aquest codi si x val 0 o 1 el valor mostrat seria \"Dos\" ja que no tenim una sent\u00e8ncia break per a eixir del switch . Per \u00faltim, la sent\u00e8ncia default s'utilitza per a executar codi quan la condici\u00f3 no coincideix amb cap case . Si default est\u00e0 al final del switch , no \u00e9s necessari el break .","title":"JavaScript b\u00e0sic"},{"location":"#javascript-basic","text":"","title":"JavaScript b\u00e0sic"},{"location":"#inclusio-de-javascript-en-html","text":"Podem incloure el codi JavaScript dins del codi HTML amb l'etiqueta <script> : <!DOCTYPE html> <html> <head> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </head> ... L'etiqueta <script> pot anar dins de <head> o dins de <body> , per\u00f2 \u00e9s preferible posar-la al final de <body> per tal d'accelerar la c\u00e0rrega de la p\u00e0gina: ... <body> ... <script> document.write(\"Hola m\u00f3n\"); </script> </body> </html> \u00c9s possible tindre v\u00e0ries etiquetes <script> en un document HTML. Tamb\u00e9 podem incloure codi JavaScript directament en el codi HTML, com a valor d'un atribut. Generalment s'utilitza per a associar un esdeveniment, com el clic d'un bot\u00f3, a una acci\u00f3 JavaScript: <button type=\"button\" onclick=\"document.write('Hola m\u00f3n');\">Saludar</button> Per\u00f2 la forma m\u00e9s usual d'incloure codi JavaScript \u00e9s per mitj\u00e0 d'arxius externs. Aix\u00f2 t\u00e9 l'advantatge de que el mateix codi \u00e9s accessible per v\u00e0ries p\u00e0gines: <script src=\"scriptExtern.js\"></script> Els scripts en arxius externs solen tindre l'extensi\u00f3 .js i no s'escriuen entre etiquetes <script> .","title":"Inclusi\u00f3 de JavaScript en HTML"},{"location":"#eixida-de-dades","text":"Hi ha v\u00e0ries formes de mostrar dades amb Javascript.","title":"Eixida de dades"},{"location":"#amb-documentwrite","text":"<!DOCTYPE html> <html> <body> <script> document.write(\"<h1>Hola m\u00f3n</h1>\"); </script> </body> </html> Aquest m\u00e8tode escriu directament al document HTML. Si s'invoca una vegada ja s'ha carregat la p\u00e0gina, esborrar\u00e0 tot el contingut HTML. Es recomana usar aquest m\u00e8tode nom\u00e9s per a testing.","title":"Amb document.write"},{"location":"#accedint-als-element-pel-seu-id","text":"Consisteix en associar un id a l'element HTML en qu\u00e8 volem mostrar la informaci\u00f3, accedir a ell amb el m\u00e8tode document.getElementById i canviar el seu HTML intern (propietat innerHTML ): <body> <p id=\"missatge\"></p> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </body> </html>","title":"Accedint als element pel seu ID"},{"location":"#amb-windowalert","text":"El m\u00e8tode window.alert mostra un di\u00e0leg d'alerta: <button type=\"button\" onclick=\"window.alert('Hola m\u00f3n')\">Saludar</button> Es pot omitir l'objecte window : <button type=\"button\" onclick=\"alert('Hola m\u00f3n')\">Saludar</button> Aquest m\u00e8tode no s'utilitza molt en l'actualitat, ja que es considera que mostrar aquest tipus de di\u00e0legs \u00e9s intrusiu.","title":"Amb window.alert"},{"location":"#eixida-per-consola","text":"Amb console.log() podem escriure directament a la consola del navegador. Aquesta opci\u00f3 \u00e9s \u00fatil per a depurar: <script> console.log(\"Hola m\u00f3n\"); </script>","title":"Eixida per consola"},{"location":"#lectura-de-dades","text":"La forma m\u00e9s normal de llegir dades de l'usuari amb JavaScript \u00e9s per mitj\u00e0 d' inputs de formularis . Generalment accedim a l'input pel seu id i llegim el valor introdu\u00eft per l'usuari ( value ): <form> <input type=\"text\" name=\"nom\" id=\"nom\"> <button type=\"button\" onclick=\"alert('Hola ' + document.getElementById('nom').value);\">Enviar</button> </form> Tamb\u00e9 podem utilizar el m\u00e8tode window.prompt : <body> <p id=\"missatge\"></p> <script> nom = window.prompt(\"Com et diuen?\"); document.getElementById('missatge').innerHTML = \"Hola \" + nom; </script> </body>","title":"Lectura de dades"},{"location":"#sintaxi-basica","text":"Cada sent\u00e8ncia finalitza mb un punt i coma ( ; ): alert('Hola'); alert('M\u00f3n'); A l'igual que en altres llenguatges, es recomana escriure una sent\u00e8ncia per l\u00ednia. El punt i coma no es obligatori escriure'l si escrivim una sent\u00e8ncia per l\u00ednia, per\u00f2 es recomana fer-ho.","title":"Sint\u00e0xi b\u00e0sica"},{"location":"#comentaris","text":"JavaScript admet comentaris d'una l\u00ednia i de v\u00e0ries l\u00ednies: //Aquest \u00e9s un comentari d'una l\u00ednia //Aquest \u00e9s un altre comentari d'una l\u00ednia /* Aquest \u00e9s un comentari de v\u00e0ries l\u00ednies*/","title":"Comentaris"},{"location":"#variables","text":"Les variables es declaren amb la paraula reservada let : let nom; //Declaraci\u00f3 sense assignaci\u00f3 let edat = 15; //Declaraci\u00f3 amb assignaci\u00f3 Una vegada declarada una variable, es pot accedir a ella i modificar el seu contingut: let missatge; missatge = \"Hola\"; console.log(missatge); //mostra 'Hola' per consola Els noms de les variables nom\u00e9s poden incloure lletres, d\u00edgits o els s\u00edmbols $ i _ . El primer car\u00e0cter no pot ser un d\u00edgit. //Noms v\u00e0lids: let nomAlumne; let a123; let _edat; let $; let _; //Noms no v\u00e0lids: let nom-alumne; let 1abc;","title":"Variables"},{"location":"#constants","text":"Les constants s\u00f3n variables a les quals s'assigna un valor en el moment de la seua creaci\u00f3 i aquest no pot ser modificat: const GRAVETAT = 9.8;","title":"Constants"},{"location":"#tipus-de-dades","text":"JavaScript \u00e9s un llenguatge din\u00e0micament tipat , el que significa que una variable pot tindre un valor d'un tipus i despr\u00e9s tindre un valor d'un tipus diferent. JavaScript t\u00e9 un nombre molt redu\u00eft de tipus de dades: num\u00e8riques, cadenes de car\u00e0cters i booleanes.","title":"Tipus de dades"},{"location":"#number","text":"Representa n\u00fameros enters i amb decimals. let edat = 51; let area = 4.56;","title":"Number"},{"location":"#string","text":"Representa cadenes de car\u00e0cters. Es pot escriure amb cometes simples, dobles o invertides. let cad1 = \"Hola\"; let cad2 = 'M\u00f3n'; let cad3 = `El valor de cad1 \u00e9s: ${cad1}`; Les cometes invertides permeten interpretar variables i operacions dins dels delimitadors ${ } .","title":"String"},{"location":"#boolean","text":"Les variables booleanes poden tindre els valors true o false. Generalment guarden el resultat d'una comparaci\u00f3. let casat = false; let actiu = true;","title":"Boolean"},{"location":"#altres-valors","text":"Quan una variable ha sigut declarada per\u00f2 no se li ha assignat cap valor, t\u00e9 el tipus undefined : let nom; console.log(nom); //Mostra undefined El valor null s'utilitza per a representar valors inexistents o desconeguts: let alumne = null; console.log(alumne); //Mostra null El valor Infinity s'obt\u00e9 al dividir un n\u00famero entre 0: console.log(1 / 0); //Mostra Infinity El valor NaN significa Not a Number . S'obt\u00e9 quan una operaci\u00f3 d\u00f3naria un resultar matem\u00e0tic erroni: console.log(\"Hola\" / 2); //Mostra NaN","title":"Altres valors"},{"location":"#loperador-typeof","text":"L'operador typeof retorna un string amb el tipus de la variable o del valor que escrivim a continuaci\u00f3: let nom = \"Pepa\"; let edat = 15; let actiu = true; console.log(nom); // Mostra \"string\" console.log(edat); // Mostra \"number\" console.log(actiu); // Mostra \"boolean\" console.log(nom / edat); // Mostra NaN","title":"L'operador typeof"},{"location":"#operadors-matematics","text":"Els operadors matem\u00e0stics b\u00e0sics s\u00f3n la suma , resta , multiplicaci\u00f3 i divisi\u00f3 . A ells podem afegir els operadors de m\u00f2dul (calcula el residu de la resta entera) i l'operador d' exponenciaci\u00f3 . Els seus s\u00edmbols s\u00f3n: Suma: + , Resta: - , Multiplicaci\u00f3: * , Divisi\u00f3: / , M\u00f2dul: % , Exponenciaci\u00f3: ** Exemples: console.log(8 % 3) // 2 console.log(2 ** 3) // 8 Tamb\u00e9 tenim altres operadors unaris com la negaci\u00f3 ( - ). let num = 5; console.log(-num) // -5","title":"Operadors matem\u00e0tics"},{"location":"#concatenacio-de-strings","text":"L'operador binari **+** usat amb cadenes, torna la concatenaci\u00f3 de les 2 cadenes. Si un dels 2 operands \u00e9s una cadena, conveteix l'altre operand en cadena i els concatena. let cad1 = \"Hola \"; let cad2 = \"M\u00f3n\"; let num = 5; let bool = true; console.log(cad1 + cad2); // \"Hola M\u00f3n\" console.log(cad1 + num); // \"Hola 5\" console.log(cad1 + bool); // \"Hola true\"","title":"Concatenaci\u00f3 de strings"},{"location":"#assignacio","text":"L'operador assignaci\u00f3 **=** significa que s'assigna a la variable de la part esquerra de l'operador, el valor resultat d'avaluar la part dreta: let num = (3 + 4) * 2; console.log(num); // 14","title":"Assignaci\u00f3"},{"location":"#increment-decrement-i-operadors-abreviats","text":"L' increment ++ augmenta el valor d'una variable en 1. El decrement -- disminueix el seu valor en 1: let num = 1; num++; console.log(num); // 2 num-- console.log(num); // 1 Aquests 2 operadors es poden usar darrere de la variable ( post-increment o post-decrement ) o davant ( pre-increment o pre-decrement ). La difer\u00e8ncia \u00e9s que amb els operadors post , primer s'avalua el valor de la variable i despr\u00e9s es modifica, mentre que amb els operadors pre , primer es modifica i despr\u00e9s s'avalua: let num = 1; console.log(num++); // 1 let num2 = 1; console.log(++num); // 2 Tamb\u00e9 tenim els operadors abreviats com en altres llenguatges, que combinen una operaci\u00f3 aritm\u00e8tica amb una assignaci\u00f3: let num = 1; num += 5; // num = num + 5 console.log(num); // 6 Els operadors abreviats s\u00f3n: += , -= , *= , /= , %= , **= .","title":"Increment, decrement i operadors abreviats"},{"location":"#precedencia-doperadors","text":"Si una operaci\u00f3 t\u00e9 m\u00e9s d'un operador, el seu ordre de prioritat es defneix generalment amb les mateixes regles que coneixem de matem\u00e0tiques. En la seg\u00fcent taula es mostren els valors de preced\u00e8ncia que t\u00e9 cada operador, a major valor major preced\u00e8ncia: Preced\u00e8ncia Nom Signe 16 post-increment .. ++ 16 post-decrement .. -- 15 pre-increment ++ .. 15 pre-decrement -- .. 15 negaci\u00f3 unaria - 14 exponenciaci\u00f3 ** 13 multiplicaci\u00f3 * 13 divisi\u00f3 / 13 m\u00f2dul % 12 suma + 12 resta - 2 asignacions = , += , etc. A l'igual que en matem\u00e0tiques, si 2 operadors tenen la mateixa preced\u00e8ncia, s'avaluen d'esquerra a dreta i els par\u00e8ntesis poden modificar la prefer\u00e8ncia agrupant operacions.","title":"Preced\u00e8ncia d'operadors"},{"location":"#operadors-de-comparacio","text":"Els operadors de comparaci\u00f3 retornen un valor boole\u00e0 . S\u00f3n els seg\u00fcents: Operador Descripci\u00f3 == igual === igualtat estricta (mateix valor i mateix tipus) != distint !== desigualtat estricta (distint valor i distint tipus) > major < menor >= major o gual <= menor o igual ? operador ternari En comparar valors de diferents tipus, JavaScript converteix els valors a n\u00fameros: console.log( '1' > 0 ); // true, la cadena '1' es converteix en el n\u00famero 1 console.log( '01' == 1 ); // true Per a valors booleans, true es converteix en 1 i false en 0 . console.log( true == 1 ); // true console.log( false == 0 ); // true L'operador d'igualtat estricta comprova els valors sense convertir els tipus: console.log( 0 === false ); // false console.log( '01' == 1 ); // false","title":"Operadors de comparaci\u00f3"},{"location":"#sentencies-condicionals","text":"Les sent\u00e8ncies condicionals s'utilitzen quan volem trencar l'estructura seq\u00fcencial del codi. Ens permet fer salts a altres parts del codi depenent d'unes determinades condicions.","title":"Sentencies condicionals"},{"location":"#if-else","text":"La sent\u00e8ncia if (...) avalua l'expressi\u00f3 booleana entre els par\u00e8ntesis i executa el bloc de codi a continuaci\u00f3 si el resultat de l'expressi\u00f3 \u00e9s true : let edat = 18; if (edat >= 18) { console.log(\"Eres major d'edat\"); } Podem afegir la sent\u00e8ncia else per a que s'execute un bloc de codi alternatiu si l'avaluaci\u00f3 de l'expressi\u00f3 entre par\u00e8ntesis \u00e9s false : if (edat >= 18) { console.log(\"Eres major d'edat\"); } else { console.log(\"Eres menor d'edat\"); } Si tenim m\u00e9s d'una condici\u00f3, podem utilitzar else if per a avaluar-les totes: if (edat < 0) { console.log(\"Encara no has nascut!\"); } else if (edat < 18) { console.log(\"Eres menor d'edat\"); } else { console.log(\"Eres major d'edat\"); }","title":"if - else"},{"location":"#operador-ternari","text":"L' operador ternari s'utilitza per a simplificar una expressi\u00f3 if else . \u00c9s especialment \u00fatil en assignacions. Per exemple, el seg\u00fcent codi: let missatge = edat >= 18 ? \"Eres major d'edat\" : \"Eres menor d'edat\"; console.log(missatge); Seria l'equivalent a: let missatge; if (edat >= 18) { missatge = \"Eres major d'edat\"; } else { missatge = \"Eres menor d'edat\"; } console.log(missatge);","title":"Operador ternari ?"},{"location":"#operadors-logics","text":"Els operadors l\u00f2gics s\u00f3n: Operador Valor Descripci\u00f3 Exemple (x = 5; y = 2; ) && and true si les 2 expressions s\u00f3n true (x < 6 && y > 1) // true \\|\\| or true si almenys una de les 2 expressions \u00e9s true (x == 4 \\|\\| y == 1) // false ! not Negaci\u00f3 de l'expressi\u00f3 !(x == 5) // false Aquests operadors poden combinar-se en v\u00e0ries expressions, tenint en compte que l'odre de preced\u00e8ncia \u00e9s: NOT > AND > OR Per exemple: let x = 6, y = 2, z = 0; if (x > 5 && (y == 2 || z != 0) && !(z < 1)) // true","title":"Operadors l\u00f2gics"},{"location":"#switch-case","text":"La sent\u00e8ncia switch - case \u00e9s similar a l'estructura if - else if - else i s'utilitza per a simplificar aquesta quan tenim moltes condicions: switch(condicio) { case 'valor1': // if (condicio === 'valor1') ... break; case 'valor2': // if (condicio === 'valor2') ... break; default: ... break; } Els valors poden ser num\u00e8rics o cadenes. La condici\u00f3 s'avalua sempre amb l' operador d'igualtat estricta === . La sent\u00e8ncia break causa l'eixida de l'estructura switch . No \u00e9s necess\u00e0ria, per\u00f2 en general s'utilitza ja que una vegada es compleix la condici\u00f3, el case que coincideix amb aquesta actua com a punt d'entrada, execuntatn-se les instruccions de tots els case a continuaci\u00f3 d'aquest. Per exemple: let x = 0; switch (x) { case 0: num = \"Zero\"; case 1: num = \"U\"; case 2: num = \"Dos\"; break; case 3: num = \"Tres\"; break; } console.log(num) // \"Dos\" En aquest codi si x val 0 o 1 el valor mostrat seria \"Dos\" ja que no tenim una sent\u00e8ncia break per a eixir del switch . Per \u00faltim, la sent\u00e8ncia default s'utilitza per a executar codi quan la condici\u00f3 no coincideix amb cap case . Si default est\u00e0 al final del switch , no \u00e9s necessari el break .","title":"switch - case"},{"location":"validacio/","text":"Validaci\u00f3 de formularis En aquest apartat veurem la validaci\u00f3 de les dades introdu\u00efdes en formularis HTML. Cal recordar que l'est\u00e0ndard HTML5 ja proporciona un validaci\u00f3 b\u00e0sica per a alguns tipus de inputs ( type=\"email\" , type=\"number\" , etc) aix\u00ed com altres restriccions ( maxlength , min , max , required , etc). Per\u00f2 en aquests apunts farem tota la validaci\u00f3 amb codi JavaScript, per tant el tipus dels inputs ser\u00e0 type=\"text\" i no usarem cap altra restricci\u00f3. Validaci\u00f3 b\u00e0sica El primer pas ser\u00e0 validar les camps requerits. Aix\u00f2 es pot detectar si el valor introdu\u00eft \u00e9s igual a la cadena buida ( \"\" ). Per exemple, si tenim el seg\u00fcent formulari: <form action=\"#\" onsubmit=\"\"> <label for=\"nom\"><strong>Nom</strong></label> <input type=\"text\" name=\"nom\" id=\"nom\"> <button type=\"button\" onclick=\"validar()\">Enviar</button> </form> La funci\u00f3 validar() validaria que el input nom no \u00e9s buit: function validar() { let nom = document.getElementById(\"nom\").value; if (nom == \"\") { alert(\"El nom no pot estar buit\"); } } L'\u00fas de alert no \u00e9s recomanat per a mostrar informaci\u00f3 a l'usuari. Al seu lloc \u00e9s millor fer-ho mostrant el text de l'error al costat, dalt o baix de l'input. Per a aix\u00f2 podem usar un element de text que inicialment estar\u00e0 buit i on podrem mostrar el text de l'error: <form action=\"#\" onsubmit=\"\"> <label for=\"nom\"><strong>Nom</strong></label> <input type=\"text\" name=\"nom\" id=\"nom\"> <span class=\"error\" id=\"nomErr\"></span><br> <button type=\"button\" onclick=\"validar()\">Enviar</button> </form> <script> function validar() { let nom = document.getElementById(\"nom\").value; if (nom == \"\") { document.getElementById('nomErr').innerHTML = 'Camp requerit'; } } </script> En aquest exemple estariem mostrant l'error dins del span amb id \"nomErr\" . La classe \"error\" ens servir\u00e0 per a assignar un estil CSS a tos els missatges d'error. Una funci\u00f3 molt util \u00e9s trim() , que s'utilitza per a eliminar els espais a l'inici i al final de una cadena. Aix\u00ed, si un usuari escriu nom\u00e9s espais en blanc en un camp d'un formulari, els podem eliminar: let camp = ' '; // Nom\u00e9s espais console.log(camp == ''); // false camp = camp.trim(); console.log(camp == ''); // true Validaci\u00f3 de tipus Podem utilitzar la funci\u00f3 isNan() per a saber si un valor cont\u00e9 un n\u00famero v\u00e0lid (recordem que tots els valors dels formularis es llegixen com a strings). Aquesta funci\u00f3 converteix el valor a n\u00famero i despr\u00e9s comprova si el resultat \u00e9s NaN (Not a number): console.log(isNaN('Hola')); // true console.log(isNaN('5')); // false console.log(isNaN('5.4')); // false console.log(isNaN('5,4')); // true, la conversi\u00f3 falla per la coma console.log(isNaN('')); // false!!, el valor de la conversi\u00f3 \u00e9s 0 Validacions de rangs i longituds Podem validar que la cadena llegida tinga una longitud m\u00ednima o m\u00e0xima usant la propietat length dels strings: console.log('hola'.length); // 4 console.log(''.length); // 0 console.log(' hola '.length); // 8, compte amb els espais en blanc! console.log(' hola '.trim().length); // 4 Com podem veure, \u00e9s convenient usar trim() per a eliminar espais a l'inici i al final. En el cas de valors num\u00e8rics , podem comprovar f\u00e0cilment que estiguen entre un valor m\u00ednim i m\u00e0xim: if (Number(valor) < 0 || Number(valor) > 15) { console.log(\"El valor ha d'estar entre 0 i 15\"); } else { console.log(\"Valor correcte\"); } Recordem que \u00e9s convenient fer abans la comprovaci\u00f3 num\u00e8rica i convertir els strings a valors num\u00e8rics. En el cas de les dates , podem comparar-les directament si tenim en compte que tenen el format yyyy-mm-dd i que s\u00f3n strings: dataActual = '2023-04-19'; dataLlegida = '2021-01-01'; if (dataLlegida === dataActual) console.log('La data llegida correspon a hui'); if (dataLlegida < dataActual) console.log('La data llegida \u00e9s anterior a la data actual'); if (dataLlegida > dataActual) console.log('La data llegida \u00e9s posterior a la data actual'); Validaci\u00f3 avan\u00e7ada Podem fer fer una validaci\u00f3 m\u00e9s acurada utilitzant expressions regulars i el m\u00e8tode test() , que retorna true si l'expressi\u00f3 regular es troba a la cadena passada com a argument: expressioRegular.test(cadena) Per exemple, tenim l'espressi\u00f3 regular /^\\d*$/ que correspon amb una cadena que t\u00e9 nom\u00e9s d\u00edgits, sense altres caracters i una cadena llegida en la variable valor : if ( /^\\d*$/.test(valor) ) { console.log('El valor llegit \u00e9s un n\u00famero'); } else { console.log('El valor llegit NO \u00e9s un n\u00famero'); }","title":"Validaci\u00f3 de formularis"},{"location":"validacio/#validacio-de-formularis","text":"En aquest apartat veurem la validaci\u00f3 de les dades introdu\u00efdes en formularis HTML. Cal recordar que l'est\u00e0ndard HTML5 ja proporciona un validaci\u00f3 b\u00e0sica per a alguns tipus de inputs ( type=\"email\" , type=\"number\" , etc) aix\u00ed com altres restriccions ( maxlength , min , max , required , etc). Per\u00f2 en aquests apunts farem tota la validaci\u00f3 amb codi JavaScript, per tant el tipus dels inputs ser\u00e0 type=\"text\" i no usarem cap altra restricci\u00f3.","title":"Validaci\u00f3 de formularis"},{"location":"validacio/#validacio-basica","text":"El primer pas ser\u00e0 validar les camps requerits. Aix\u00f2 es pot detectar si el valor introdu\u00eft \u00e9s igual a la cadena buida ( \"\" ). Per exemple, si tenim el seg\u00fcent formulari: <form action=\"#\" onsubmit=\"\"> <label for=\"nom\"><strong>Nom</strong></label> <input type=\"text\" name=\"nom\" id=\"nom\"> <button type=\"button\" onclick=\"validar()\">Enviar</button> </form> La funci\u00f3 validar() validaria que el input nom no \u00e9s buit: function validar() { let nom = document.getElementById(\"nom\").value; if (nom == \"\") { alert(\"El nom no pot estar buit\"); } } L'\u00fas de alert no \u00e9s recomanat per a mostrar informaci\u00f3 a l'usuari. Al seu lloc \u00e9s millor fer-ho mostrant el text de l'error al costat, dalt o baix de l'input. Per a aix\u00f2 podem usar un element de text que inicialment estar\u00e0 buit i on podrem mostrar el text de l'error: <form action=\"#\" onsubmit=\"\"> <label for=\"nom\"><strong>Nom</strong></label> <input type=\"text\" name=\"nom\" id=\"nom\"> <span class=\"error\" id=\"nomErr\"></span><br> <button type=\"button\" onclick=\"validar()\">Enviar</button> </form> <script> function validar() { let nom = document.getElementById(\"nom\").value; if (nom == \"\") { document.getElementById('nomErr').innerHTML = 'Camp requerit'; } } </script> En aquest exemple estariem mostrant l'error dins del span amb id \"nomErr\" . La classe \"error\" ens servir\u00e0 per a assignar un estil CSS a tos els missatges d'error. Una funci\u00f3 molt util \u00e9s trim() , que s'utilitza per a eliminar els espais a l'inici i al final de una cadena. Aix\u00ed, si un usuari escriu nom\u00e9s espais en blanc en un camp d'un formulari, els podem eliminar: let camp = ' '; // Nom\u00e9s espais console.log(camp == ''); // false camp = camp.trim(); console.log(camp == ''); // true","title":"Validaci\u00f3 b\u00e0sica"},{"location":"validacio/#validacio-de-tipus","text":"Podem utilitzar la funci\u00f3 isNan() per a saber si un valor cont\u00e9 un n\u00famero v\u00e0lid (recordem que tots els valors dels formularis es llegixen com a strings). Aquesta funci\u00f3 converteix el valor a n\u00famero i despr\u00e9s comprova si el resultat \u00e9s NaN (Not a number): console.log(isNaN('Hola')); // true console.log(isNaN('5')); // false console.log(isNaN('5.4')); // false console.log(isNaN('5,4')); // true, la conversi\u00f3 falla per la coma console.log(isNaN('')); // false!!, el valor de la conversi\u00f3 \u00e9s 0","title":"Validaci\u00f3 de tipus"},{"location":"validacio/#validacions-de-rangs-i-longituds","text":"Podem validar que la cadena llegida tinga una longitud m\u00ednima o m\u00e0xima usant la propietat length dels strings: console.log('hola'.length); // 4 console.log(''.length); // 0 console.log(' hola '.length); // 8, compte amb els espais en blanc! console.log(' hola '.trim().length); // 4 Com podem veure, \u00e9s convenient usar trim() per a eliminar espais a l'inici i al final. En el cas de valors num\u00e8rics , podem comprovar f\u00e0cilment que estiguen entre un valor m\u00ednim i m\u00e0xim: if (Number(valor) < 0 || Number(valor) > 15) { console.log(\"El valor ha d'estar entre 0 i 15\"); } else { console.log(\"Valor correcte\"); } Recordem que \u00e9s convenient fer abans la comprovaci\u00f3 num\u00e8rica i convertir els strings a valors num\u00e8rics. En el cas de les dates , podem comparar-les directament si tenim en compte que tenen el format yyyy-mm-dd i que s\u00f3n strings: dataActual = '2023-04-19'; dataLlegida = '2021-01-01'; if (dataLlegida === dataActual) console.log('La data llegida correspon a hui'); if (dataLlegida < dataActual) console.log('La data llegida \u00e9s anterior a la data actual'); if (dataLlegida > dataActual) console.log('La data llegida \u00e9s posterior a la data actual');","title":"Validacions de rangs i longituds"},{"location":"validacio/#validacio-avancada","text":"Podem fer fer una validaci\u00f3 m\u00e9s acurada utilitzant expressions regulars i el m\u00e8tode test() , que retorna true si l'expressi\u00f3 regular es troba a la cadena passada com a argument: expressioRegular.test(cadena) Per exemple, tenim l'espressi\u00f3 regular /^\\d*$/ que correspon amb una cadena que t\u00e9 nom\u00e9s d\u00edgits, sense altres caracters i una cadena llegida en la variable valor : if ( /^\\d*$/.test(valor) ) { console.log('El valor llegit \u00e9s un n\u00famero'); } else { console.log('El valor llegit NO \u00e9s un n\u00famero'); }","title":"Validaci\u00f3 avan\u00e7ada"}]}