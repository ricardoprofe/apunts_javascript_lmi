{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JavaScript b\u00e0sic Inclusi\u00f3 de JavaScript en HTML Podem incloure el codi JavaScript dins del codi HTML amb l'etiqueta <script> : <!DOCTYPE html> <html> <head> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </head> ... L'etiqueta <script> pot anar dins de <head> o dins de <body> , per\u00f2 \u00e9s preferible posar-la al final de <body> per tal d'accelerar la c\u00e0rrega de la p\u00e0gina: ... <body> ... <script> document.write(\"Hola m\u00f3n\"); </script> </body> </html> \u00c9s possible tindre v\u00e0ries etiquetes <script> en un document HTML. Tamb\u00e9 podem incloure codi JavaScript directament en el codi HTML, com a valor d'un atribut. Generalment s'utilitza per a associar un esdeveniment, com el clic d'un bot\u00f3, a una acci\u00f3 JavaScript: <button type=\"button\" onclick=\"document.write('Hola m\u00f3n');\">Saludar</button> Per\u00f2 la forma m\u00e9s usual d'incloure codi JavaScript \u00e9s per mitj\u00e0 d'arxius externs. Aix\u00f2 t\u00e9 l'advantatge de que el mateix codi \u00e9s accessible per v\u00e0ries p\u00e0gines: <script src=\"scriptExtern.js\"></script> Els scripts en arxius externs solen tindre l'extensi\u00f3 .js i no s'escriuen entre etiquetes <script> . Eixida de dades Hi ha v\u00e0ries formes de mostrar dades amb Javascript. Amb document.write <!DOCTYPE html> <html> <body> <script> document.write(\"<h1>Hola m\u00f3n</h1>\"); </script> </body> </html> Aquest m\u00e8tode escriu directament al document HTML. Si s'invoca una vegada ja s'ha carregat la p\u00e0gina, esborrar\u00e0 tot el contingut HTML. Es recomana usar aquest m\u00e8tode nom\u00e9s per a testing. Accedint als element pel seu ID Consisteix en associar un id a l'element HTML en qu\u00e8 volem mostrar la informaci\u00f3, accedir a ell amb el m\u00e8tode document.getElementById i canviar el seu HTML intern (propietat innerHTML ): <body> <p id=\"missatge\"></p> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </body> </html> Amb window.alert El m\u00e8tode window.alert mostra un di\u00e0leg d'alerta: <button type=\"button\" onclick=\"window.alert('Hola m\u00f3n')\">Saludar</button> Es pot omitir l'objecte window : <button type=\"button\" onclick=\"alert('Hola m\u00f3n')\">Saludar</button> Aquest m\u00e8tode no s'utilitza molt en l'actualitat, ja que es considera que mostrar aquest tipus de di\u00e0legs \u00e9s intrusiu. Eixida per consola Amb console.log() podem escriure directament a la consola del navegador. Aquesta opci\u00f3 \u00e9s \u00fatil per a depurar: <script> console.log(\"Hola m\u00f3n\"); </script> Lectura de dades La forma m\u00e9s normal de llegir dades de l'usuari amb JavaScript \u00e9s per mitj\u00e0 d' inputs de formularis . Generalment accedim a l'input pel seu id i llegim el valor introdu\u00eft per l'usuari ( value ): <form> <input type=\"text\" name=\"nom\" id=\"nom\"> <button type=\"button\" onclick=\"alert('Hola ' + document.getElementById('nom').value);\">Enviar</button> </form> Tamb\u00e9 podem utilizar el m\u00e8tode window.prompt : <body> <p id=\"missatge\"></p> <script> nom = window.prompt(\"Com et diuen?\"); document.getElementById('missatge').innerHTML = \"Hola \" + nom; </script> </body> Sint\u00e0xi b\u00e0sica Cada sent\u00e8ncia finalitza mb un punt i coma ( ; ): alert('Hola'); alert('M\u00f3n'); A l'igual que en altres llenguatges, es recomana escriure una sent\u00e8ncia per l\u00ednia. El punt i coma no es obligatori escriure'l si escrivim una sent\u00e8ncia per l\u00ednia, per\u00f2 es recomana fer-ho. Comentaris JavaScript admet comentaris d'una l\u00ednia i de v\u00e0ries l\u00ednies: //Aquest \u00e9s un comentari d'una l\u00ednia //Aquest \u00e9s un altre comentari d'una l\u00ednia /* Aquest \u00e9s un comentari de v\u00e0ries l\u00ednies*/ Variables Les variables es declaren amb la paraula reservada let : let nom; //Declaraci\u00f3 sense assignaci\u00f3 let edat = 15; //Declaraci\u00f3 amb assignaci\u00f3 Una vegada declarada una variable, es pot accedir a ella i modificar el seu contingut: let missatge; missatge = \"Hola\"; console.log(missatge); //mostra 'Hola' per consola Els noms de les variables nom\u00e9s poden incloure lletres, d\u00edgits o els s\u00edmbols $ i _ . El primer car\u00e0cter no pot ser un d\u00edgit. //Noms v\u00e0lids: let nomAlumne; let a123; let _edat; let $; let _; //Noms no v\u00e0lids: let nom-alumne; let 1abc; Constants Les constants s\u00f3n variables a les quals s'assigna un valor en el moment de la seua creaci\u00f3 i aquest no pot ser modificat: const GRAVETAT = 9.8; Tipus de dades JavaScript \u00e9s un llenguatge din\u00e0micament tipat , el que significa que una variable pot tindre un valor d'un tipus i despr\u00e9s tindre un valor d'un tipus diferent. JavaScript t\u00e9 un nombre molt redu\u00eft de tipus de dades: num\u00e8riques, cadenes de car\u00e0cters i booleanes. Number Representa n\u00fameros enters i amb decimals. let edat = 51; let area = 4.56; String Representa cadenes de car\u00e0cters. Es pot escriure amb cometes simples, dobles o invertides. let cad1 = \"Hola\"; let cad2 = 'M\u00f3n'; let cad3 = `El valor de cad1 \u00e9s: ${cad1}`; Les cometes invertides permeten interpretar variables i operacions dins dels delimitadors ${ } . Boolean Les variables booleanes poden tindre els valors true o false. Generalment guarden el resultat d'una comparaci\u00f3. let casat = false; let actiu = true; Altres valors Quan una variable ha sigut declarada per\u00f2 no se li ha assignat cap valor, t\u00e9 el tipus undefined : let nom; console.log(nom); //Mostra undefined El valor null s'utilitza per a representar valors inexistents o desconeguts: let alumne = null; console.log(alumne); //Mostra null El valor Infinity s'obt\u00e9 al dividir un n\u00famero entre 0: console.log(1 / 0); //Mostra Infinity El valor NaN significa Not a Number . S'obt\u00e9 quan una operaci\u00f3 d\u00f3naria un resultar matem\u00e0tic erroni: console.log(\"Hola\" / 2); //Mostra NaN L'operador typeof L'operador typeof retorna un string amb el tipus de la variable o del valor que escrivim a continuaci\u00f3: let nom = \"Pepa\"; let edat = 15; let actiu = true; console.log(nom); // Mostra \"string\" console.log(edat); // Mostra \"number\" console.log(actiu); // Mostra \"boolean\" console.log(nom / edat); // Mostra NaN Operadors matem\u00e0tics Els operadors matem\u00e0stics b\u00e0sics s\u00f3n la suma , resta , multiplicaci\u00f3 i divisi\u00f3 . A ells podem afegir els operadors de m\u00f2dul (calcula el residu de la resta entera) i l'operador d' exponenciaci\u00f3 . Els seus s\u00edmbols s\u00f3n: Suma: + , Resta: - , Multiplicaci\u00f3: * , Divisi\u00f3: / , M\u00f2dul: % , Exponenciaci\u00f3: ** Exemples: console.log(8 % 3) // 2 console.log(2 ** 3) // 8 Tamb\u00e9 tenim altres operadors unaris com la negaci\u00f3 ( - ). let num = 5; console.log(-num) // -5 Concatenaci\u00f3 de strings L'operador binari **+** usat amb cadenes, torna la concatenaci\u00f3 de les 2 cadenes. Si un dels 2 operands \u00e9s una cadena, conveteix l'altre operand en cadena i els concatena. let cad1 = \"Hola \"; let cad2 = \"M\u00f3n\"; let num = 5; let bool = true; console.log(cad1 + cad2); // \"Hola M\u00f3n\" console.log(cad1 + num); // \"Hola 5\" console.log(cad1 + bool); // \"Hola true\" Assignaci\u00f3 L'operador assignaci\u00f3 **=** significa que s'assigna a la variable de la part esquerra de l'operador, el valor resultat d'avaluar la part dreta: let num = (3 + 4) * 2; console.log(num); // 14 Increment, decrement i operadors abreviats L' increment ++ augmenta el valor d'una variable en 1. El decrement -- disminueix el seu valor en 1: let num = 1; num++; console.log(num); // 2 num-- console.log(num); // 1 Aquests 2 operadors es poden usar darrere de la variable ( post-increment o post-decrement ) o davant ( pre-increment o pre-decrement ). La difer\u00e8ncia \u00e9s que amb els operadors post , primer s'avalua el valor de la variable i despr\u00e9s es modifica, mentre que amb els operadors pre , primer es modifica i despr\u00e9s s'avalua: let num = 1; console.log(num++); // 1 let num2 = 1; console.log(++num); // 2 Tamb\u00e9 tenim els operadors abreviats com en altres llenguatges, que combinen una operaci\u00f3 aritm\u00e8tica amb una assignaci\u00f3: let num = 1; num += 5; // num = num + 5 console.log(num); // 6 Els operadors abreviats s\u00f3n: += , -= , *= , /= , %= , **= . Preced\u00e8ncia d'operadors Si una operaci\u00f3 t\u00e9 m\u00e9s d'un operador, el seu ordre de prioritat es defneix generalment amb les mateixes regles que coneixem de matem\u00e0tiques. En la seg\u00fcent taula es mostren els valors de preced\u00e8ncia que t\u00e9 cada operador, a major valor major preced\u00e8ncia: Preced\u00e8ncia Nom Signe 16 post-increment .. ++ 16 post-decrement .. -- 15 pre-increment ++ .. 15 pre-decrement -- .. 15 negaci\u00f3 unaria - 14 exponenciaci\u00f3 ** 13 multiplicaci\u00f3 * 13 divisi\u00f3 / 13 m\u00f2dul % 12 suma + 12 resta - 2 asignacions = , += , etc. A l'igual que en matem\u00e0tiques, si 2 operadors tenen la mateixa preced\u00e8ncia, s'avaluen d'esquerra a dreta i els par\u00e8ntesis poden modificar la prefer\u00e8ncia agrupant operacions.","title":"JavaScript b\u00e0sic"},{"location":"#javascript-basic","text":"","title":"JavaScript b\u00e0sic"},{"location":"#inclusio-de-javascript-en-html","text":"Podem incloure el codi JavaScript dins del codi HTML amb l'etiqueta <script> : <!DOCTYPE html> <html> <head> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </head> ... L'etiqueta <script> pot anar dins de <head> o dins de <body> , per\u00f2 \u00e9s preferible posar-la al final de <body> per tal d'accelerar la c\u00e0rrega de la p\u00e0gina: ... <body> ... <script> document.write(\"Hola m\u00f3n\"); </script> </body> </html> \u00c9s possible tindre v\u00e0ries etiquetes <script> en un document HTML. Tamb\u00e9 podem incloure codi JavaScript directament en el codi HTML, com a valor d'un atribut. Generalment s'utilitza per a associar un esdeveniment, com el clic d'un bot\u00f3, a una acci\u00f3 JavaScript: <button type=\"button\" onclick=\"document.write('Hola m\u00f3n');\">Saludar</button> Per\u00f2 la forma m\u00e9s usual d'incloure codi JavaScript \u00e9s per mitj\u00e0 d'arxius externs. Aix\u00f2 t\u00e9 l'advantatge de que el mateix codi \u00e9s accessible per v\u00e0ries p\u00e0gines: <script src=\"scriptExtern.js\"></script> Els scripts en arxius externs solen tindre l'extensi\u00f3 .js i no s'escriuen entre etiquetes <script> .","title":"Inclusi\u00f3 de JavaScript en HTML"},{"location":"#eixida-de-dades","text":"Hi ha v\u00e0ries formes de mostrar dades amb Javascript.","title":"Eixida de dades"},{"location":"#amb-documentwrite","text":"<!DOCTYPE html> <html> <body> <script> document.write(\"<h1>Hola m\u00f3n</h1>\"); </script> </body> </html> Aquest m\u00e8tode escriu directament al document HTML. Si s'invoca una vegada ja s'ha carregat la p\u00e0gina, esborrar\u00e0 tot el contingut HTML. Es recomana usar aquest m\u00e8tode nom\u00e9s per a testing.","title":"Amb document.write"},{"location":"#accedint-als-element-pel-seu-id","text":"Consisteix en associar un id a l'element HTML en qu\u00e8 volem mostrar la informaci\u00f3, accedir a ell amb el m\u00e8tode document.getElementById i canviar el seu HTML intern (propietat innerHTML ): <body> <p id=\"missatge\"></p> <script> document.getElementById(\"missatge\").innerHTML = \"Hola m\u00f3n\"; </script> </body> </html>","title":"Accedint als element pel seu ID"},{"location":"#amb-windowalert","text":"El m\u00e8tode window.alert mostra un di\u00e0leg d'alerta: <button type=\"button\" onclick=\"window.alert('Hola m\u00f3n')\">Saludar</button> Es pot omitir l'objecte window : <button type=\"button\" onclick=\"alert('Hola m\u00f3n')\">Saludar</button> Aquest m\u00e8tode no s'utilitza molt en l'actualitat, ja que es considera que mostrar aquest tipus de di\u00e0legs \u00e9s intrusiu.","title":"Amb window.alert"},{"location":"#eixida-per-consola","text":"Amb console.log() podem escriure directament a la consola del navegador. Aquesta opci\u00f3 \u00e9s \u00fatil per a depurar: <script> console.log(\"Hola m\u00f3n\"); </script>","title":"Eixida per consola"},{"location":"#lectura-de-dades","text":"La forma m\u00e9s normal de llegir dades de l'usuari amb JavaScript \u00e9s per mitj\u00e0 d' inputs de formularis . Generalment accedim a l'input pel seu id i llegim el valor introdu\u00eft per l'usuari ( value ): <form> <input type=\"text\" name=\"nom\" id=\"nom\"> <button type=\"button\" onclick=\"alert('Hola ' + document.getElementById('nom').value);\">Enviar</button> </form> Tamb\u00e9 podem utilizar el m\u00e8tode window.prompt : <body> <p id=\"missatge\"></p> <script> nom = window.prompt(\"Com et diuen?\"); document.getElementById('missatge').innerHTML = \"Hola \" + nom; </script> </body>","title":"Lectura de dades"},{"location":"#sintaxi-basica","text":"Cada sent\u00e8ncia finalitza mb un punt i coma ( ; ): alert('Hola'); alert('M\u00f3n'); A l'igual que en altres llenguatges, es recomana escriure una sent\u00e8ncia per l\u00ednia. El punt i coma no es obligatori escriure'l si escrivim una sent\u00e8ncia per l\u00ednia, per\u00f2 es recomana fer-ho.","title":"Sint\u00e0xi b\u00e0sica"},{"location":"#comentaris","text":"JavaScript admet comentaris d'una l\u00ednia i de v\u00e0ries l\u00ednies: //Aquest \u00e9s un comentari d'una l\u00ednia //Aquest \u00e9s un altre comentari d'una l\u00ednia /* Aquest \u00e9s un comentari de v\u00e0ries l\u00ednies*/","title":"Comentaris"},{"location":"#variables","text":"Les variables es declaren amb la paraula reservada let : let nom; //Declaraci\u00f3 sense assignaci\u00f3 let edat = 15; //Declaraci\u00f3 amb assignaci\u00f3 Una vegada declarada una variable, es pot accedir a ella i modificar el seu contingut: let missatge; missatge = \"Hola\"; console.log(missatge); //mostra 'Hola' per consola Els noms de les variables nom\u00e9s poden incloure lletres, d\u00edgits o els s\u00edmbols $ i _ . El primer car\u00e0cter no pot ser un d\u00edgit. //Noms v\u00e0lids: let nomAlumne; let a123; let _edat; let $; let _; //Noms no v\u00e0lids: let nom-alumne; let 1abc;","title":"Variables"},{"location":"#constants","text":"Les constants s\u00f3n variables a les quals s'assigna un valor en el moment de la seua creaci\u00f3 i aquest no pot ser modificat: const GRAVETAT = 9.8;","title":"Constants"},{"location":"#tipus-de-dades","text":"JavaScript \u00e9s un llenguatge din\u00e0micament tipat , el que significa que una variable pot tindre un valor d'un tipus i despr\u00e9s tindre un valor d'un tipus diferent. JavaScript t\u00e9 un nombre molt redu\u00eft de tipus de dades: num\u00e8riques, cadenes de car\u00e0cters i booleanes.","title":"Tipus de dades"},{"location":"#number","text":"Representa n\u00fameros enters i amb decimals. let edat = 51; let area = 4.56;","title":"Number"},{"location":"#string","text":"Representa cadenes de car\u00e0cters. Es pot escriure amb cometes simples, dobles o invertides. let cad1 = \"Hola\"; let cad2 = 'M\u00f3n'; let cad3 = `El valor de cad1 \u00e9s: ${cad1}`; Les cometes invertides permeten interpretar variables i operacions dins dels delimitadors ${ } .","title":"String"},{"location":"#boolean","text":"Les variables booleanes poden tindre els valors true o false. Generalment guarden el resultat d'una comparaci\u00f3. let casat = false; let actiu = true;","title":"Boolean"},{"location":"#altres-valors","text":"Quan una variable ha sigut declarada per\u00f2 no se li ha assignat cap valor, t\u00e9 el tipus undefined : let nom; console.log(nom); //Mostra undefined El valor null s'utilitza per a representar valors inexistents o desconeguts: let alumne = null; console.log(alumne); //Mostra null El valor Infinity s'obt\u00e9 al dividir un n\u00famero entre 0: console.log(1 / 0); //Mostra Infinity El valor NaN significa Not a Number . S'obt\u00e9 quan una operaci\u00f3 d\u00f3naria un resultar matem\u00e0tic erroni: console.log(\"Hola\" / 2); //Mostra NaN","title":"Altres valors"},{"location":"#loperador-typeof","text":"L'operador typeof retorna un string amb el tipus de la variable o del valor que escrivim a continuaci\u00f3: let nom = \"Pepa\"; let edat = 15; let actiu = true; console.log(nom); // Mostra \"string\" console.log(edat); // Mostra \"number\" console.log(actiu); // Mostra \"boolean\" console.log(nom / edat); // Mostra NaN","title":"L'operador typeof"},{"location":"#operadors-matematics","text":"Els operadors matem\u00e0stics b\u00e0sics s\u00f3n la suma , resta , multiplicaci\u00f3 i divisi\u00f3 . A ells podem afegir els operadors de m\u00f2dul (calcula el residu de la resta entera) i l'operador d' exponenciaci\u00f3 . Els seus s\u00edmbols s\u00f3n: Suma: + , Resta: - , Multiplicaci\u00f3: * , Divisi\u00f3: / , M\u00f2dul: % , Exponenciaci\u00f3: ** Exemples: console.log(8 % 3) // 2 console.log(2 ** 3) // 8 Tamb\u00e9 tenim altres operadors unaris com la negaci\u00f3 ( - ). let num = 5; console.log(-num) // -5","title":"Operadors matem\u00e0tics"},{"location":"#concatenacio-de-strings","text":"L'operador binari **+** usat amb cadenes, torna la concatenaci\u00f3 de les 2 cadenes. Si un dels 2 operands \u00e9s una cadena, conveteix l'altre operand en cadena i els concatena. let cad1 = \"Hola \"; let cad2 = \"M\u00f3n\"; let num = 5; let bool = true; console.log(cad1 + cad2); // \"Hola M\u00f3n\" console.log(cad1 + num); // \"Hola 5\" console.log(cad1 + bool); // \"Hola true\"","title":"Concatenaci\u00f3 de strings"},{"location":"#assignacio","text":"L'operador assignaci\u00f3 **=** significa que s'assigna a la variable de la part esquerra de l'operador, el valor resultat d'avaluar la part dreta: let num = (3 + 4) * 2; console.log(num); // 14","title":"Assignaci\u00f3"},{"location":"#increment-decrement-i-operadors-abreviats","text":"L' increment ++ augmenta el valor d'una variable en 1. El decrement -- disminueix el seu valor en 1: let num = 1; num++; console.log(num); // 2 num-- console.log(num); // 1 Aquests 2 operadors es poden usar darrere de la variable ( post-increment o post-decrement ) o davant ( pre-increment o pre-decrement ). La difer\u00e8ncia \u00e9s que amb els operadors post , primer s'avalua el valor de la variable i despr\u00e9s es modifica, mentre que amb els operadors pre , primer es modifica i despr\u00e9s s'avalua: let num = 1; console.log(num++); // 1 let num2 = 1; console.log(++num); // 2 Tamb\u00e9 tenim els operadors abreviats com en altres llenguatges, que combinen una operaci\u00f3 aritm\u00e8tica amb una assignaci\u00f3: let num = 1; num += 5; // num = num + 5 console.log(num); // 6 Els operadors abreviats s\u00f3n: += , -= , *= , /= , %= , **= .","title":"Increment, decrement i operadors abreviats"},{"location":"#precedencia-doperadors","text":"Si una operaci\u00f3 t\u00e9 m\u00e9s d'un operador, el seu ordre de prioritat es defneix generalment amb les mateixes regles que coneixem de matem\u00e0tiques. En la seg\u00fcent taula es mostren els valors de preced\u00e8ncia que t\u00e9 cada operador, a major valor major preced\u00e8ncia: Preced\u00e8ncia Nom Signe 16 post-increment .. ++ 16 post-decrement .. -- 15 pre-increment ++ .. 15 pre-decrement -- .. 15 negaci\u00f3 unaria - 14 exponenciaci\u00f3 ** 13 multiplicaci\u00f3 * 13 divisi\u00f3 / 13 m\u00f2dul % 12 suma + 12 resta - 2 asignacions = , += , etc. A l'igual que en matem\u00e0tiques, si 2 operadors tenen la mateixa preced\u00e8ncia, s'avaluen d'esquerra a dreta i els par\u00e8ntesis poden modificar la prefer\u00e8ncia agrupant operacions.","title":"Preced\u00e8ncia d'operadors"}]}